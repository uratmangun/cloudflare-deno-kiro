name: Deploy React App to Netlify

on:
  push:
    branches: [main, master]
    paths:
      - 'src/**'
      - 'public/**'
      - 'index.html'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'vite.config.ts'
      - 'tailwind.config.js'
      - 'postcss.config.js'
      - '.github/workflows/deploy-netlify.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy to Netlify
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build React app
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Set Netlify Site ID
        id: netlify-site
        run: |
          # Use existing site ID or create placeholder for new deployment
          if [ -n "${{ secrets.NETLIFY_SITE_ID }}" ]; then
            echo "Using existing site ID: ${{ secrets.NETLIFY_SITE_ID }}"
            echo "site_id=${{ secrets.NETLIFY_SITE_ID }}" >> $GITHUB_OUTPUT
          else
            echo "No site ID configured - deployment will create new site"
            echo "site_id=" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        id: netlify-deploy
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.ADMIN_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ steps.netlify-site.outputs.site_id }}

      - name: Update Repository Homepage URL
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.netlify-deploy.outputs.deploy-url }}';
            
            if (deploymentUrl && deploymentUrl !== '') {
              try {
                await github.rest.repos.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  homepage: deploymentUrl,
                  description: 'üöÄ Kiro & Windsurf Starter Pack - AI-Powered Development Template'
                });
                
                console.log(`‚úÖ Repository homepage updated to: ${deploymentUrl}`);
              } catch (error) {
                console.error('‚ùå Failed to update repository homepage:', error);
                core.setFailed(`Failed to update homepage: ${error.message}`);
              }
            } else {
              console.log('‚ö†Ô∏è No deployment URL found, skipping homepage update');
            }

      - name: Comment on PR with deployment URL
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.netlify-deploy.outputs.deploy-url }}';
            
            if (deploymentUrl && deploymentUrl !== '') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `üöÄ **Netlify Deployment**\n\n‚úÖ Successfully deployed to: ${deploymentUrl}\n\nüìù Preview your changes at the link above!`
              });
            }

      - name: Create GitHub deployment
        if: always()
        id: create-deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Netlify deployment',
              auto_merge: false,
              required_contexts: []
            });
            
            return deployment.data.id;

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.netlify-deploy.outputs.deploy-url }}';
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const deploymentId = ${{ steps.create-deployment.outputs.result }};
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deploymentId,
              state: state,
              environment_url: deploymentUrl || '',
              description: state === 'success' ? 'Deployment succeeded' : 'Deployment failed'
            });
