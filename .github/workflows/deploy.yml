name: Deploy to Cloudflare Pages and Deno Deploy

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  deploy-deno:
    runs-on: ubuntu-latest
    name: Deploy Deno Function
    outputs:
      deno_url: ${{ steps.deno_url.outputs.deno_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Set Deno project name from repository
        id: deno_project_name
        run: |
          PROJECT_NAME="${GITHUB_REPOSITORY##*/}"
          echo "deno_project_name=${PROJECT_NAME}" >> $GITHUB_OUTPUT
          echo "Using repository name as Deno project name: ${PROJECT_NAME}"

      - name: Deploy to Deno Deploy
        uses: denoland/deployctl@v1
        id: deno_deploy
        with:
          project: ${{ steps.deno_project_name.outputs.deno_project_name }}
          entrypoint: main.ts
          root: .
        env:
          DENO_DEPLOY_TOKEN: ${{ secrets.DENO_DEPLOY_TOKEN }}

      - name: Get Deno Deploy URL
        id: deno_url
        run: |
          PROJECT_NAME="${{ steps.deno_project_name.outputs.deno_project_name }}"
          DENO_URL="https://${PROJECT_NAME}.deno.dev"
          echo "deno_url=${DENO_URL}" >> $GITHUB_OUTPUT
          echo "Deno Deploy URL: ${DENO_URL}"

  deploy-pages:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages
    needs: deploy-deno
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build project
        run: pnpm run build
        env:
          NODE_ENV: production
          

      - name: Set project name from repository
        id: project_name
        run: |
          PROJECT_NAME="${GITHUB_REPOSITORY##*/}"
          echo "project_name=${PROJECT_NAME}" >> $GITHUB_OUTPUT
          echo "Using repository name as project name: ${PROJECT_NAME}"

      - name: Create Cloudflare Pages project if not exists
        run: |
          PROJECT_NAME="${{ steps.project_name.outputs.project_name }}"
          echo "Using project name: $PROJECT_NAME"
          
          # Try to get the project first
          PROJECT_EXISTS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/$PROJECT_NAME" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.success')
          
          if [ "$PROJECT_EXISTS" != "true" ]; then
            echo "Project doesn't exist, creating new Cloudflare Pages project..."
            curl -X POST "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{
                \"name\": \"$PROJECT_NAME\",
                \"production_branch\": \"main\"
              }"
            echo "Cloudflare Pages project created successfully"
          else
            echo "Project already exists, skipping creation"
          fi

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        id: cloudflare_pages_deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ steps.project_name.outputs.project_name }}
          directory: dist
          wranglerVersion: '3'

      - name: Set Deno API URL in Cloudflare Pages Environment Variables
        run: |
          PROJECT_NAME="${{ steps.project_name.outputs.project_name }}"
          DENO_URL="${{ needs.deploy-deno.outputs.deno_url }}"
          
          echo "Setting VITE_DENO_API_URL to: ${DENO_URL}"
          
          # Set environment variable for production environment
          curl -X PATCH "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${PROJECT_NAME}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "{
              \"deployment_configs\": {
                \"production\": {
                  \"env_vars\": {
                    \"VITE_DENO_API_URL\": {
                      \"value\": \"${DENO_URL}\"
                    }
                  }
                }
              }
            }"
          
          echo "Environment variable VITE_DENO_API_URL set successfully"

      - name: Update repository website URL
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deploymentUrl = "${{ steps.cloudflare_pages_deploy.outputs.url }}";
            
            if (deploymentUrl) {
              try {
                await github.rest.repos.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  homepage: deploymentUrl
                });
                console.log(`Repository website URL updated to: ${deploymentUrl}`);
              } catch (error) {
                console.error('Failed to update repository website URL:', error);
                throw error;
              }
            }

      - name: Add PR comment with deployment URL
        if: github.event_name == 'pull_request' && steps.cloudflare_pages_deploy.outputs.url
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = "${{ steps.cloudflare_pages_deploy.outputs.url }}";
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Preview deployment is ready!**\n\nâœ… Preview URL: ${deploymentUrl}\n\nThis deployment will be available until the PR is merged or closed.`
            });
